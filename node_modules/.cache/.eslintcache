[{"/Users/elisafernandez/Desktop/tarea1final/src/index.js":"1","/Users/elisafernandez/Desktop/tarea1final/src/App.js":"2","/Users/elisafernandez/Desktop/tarea1final/src/reportWebVitals.js":"3"},{"size":500,"mtime":1617649621525,"results":"4","hashOfConfig":"5"},{"size":16382,"mtime":1617827654177,"results":"6","hashOfConfig":"5"},{"size":362,"mtime":1617649621525,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"1kl30nz",{"filePath":"11","messages":"12","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"/Users/elisafernandez/Desktop/tarea1final/src/index.js",[],["16","17"],"/Users/elisafernandez/Desktop/tarea1final/src/App.js",["18","19","20","21","22","23","24","25","26","27","28"],"import React, { Component } from 'react';\nimport './App.css';\n\n\n\nclass App extends Component {\n  include\n    constructor(props) {\n        super(props);\n        this.state = {\n                temporadas: [],\n                isLoaded: false,\n                bool_episodes: false,\n                episodes: [],\n                episodio: '',\n                bool_episodio: false,\n                personaje: '',\n                bool_personaje: false,\n                quotes_personaje: '',\n                value: '',\n                lista_personaje_state: [],\n                bool_buscado: false\n        }\n        this.searchHandler = this.searchHandler.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n    \n\n    componentDidMount() {\n         fetch('https://tarea-1-breaking-bad.herokuapp.com/api/episodes',\n      {\n        method: \"GET\",\n        \n      }\n    )\n        .then(res => res.json())\n        .then(resultado_json => {\n          var temporada_bb = 0;\n          var temporada_bcs = 0;\n          var episodios_bb = [];\n          var episodios_bcs = [];\n         //console.log(`${resultado_json.length}`);\n\n          //recorro todos los episodios obtenidos y separo por serie\n          for (let i=0; i<resultado_json.length; i+=1){\n            \n            //si es que es de Breaking bad lo agrego al array de bb\n            if(resultado_json[i].series =='Breaking Bad'){\n              \n              episodios_bb.push(resultado_json[i]);\n            }\n            //si es que no es de bb, lo agrego al array de bcs\n            else {\n              episodios_bcs.push(resultado_json[i]);}\n          }\n\n          //recorro los episodios de bb y encuentro cuantas temporadas hay\n          for (let i=0; i<episodios_bb.length; i+=1)\n          {\n            var temporadas_provisoria_bb = episodios_bb[i].season;\n            if (parseInt(temporadas_provisoria_bb) > parseInt(temporada_bb)){\n              temporada_bb = temporadas_provisoria_bb;\n            }\n            \n          }\n\n          //recorro los episodios de bcs y encuentro cuantas temporadas hay\n          for (let i=0; i<episodios_bcs.length; i+=1)\n          {\n            var temporadas_provisoria_bcs = episodios_bcs[i].season;\n            if (parseInt(temporadas_provisoria_bcs) > parseInt(temporada_bcs)){\n              temporada_bcs = temporadas_provisoria_bcs;\n            }\n            \n          }\n\n          var temp_bb = [];\n          var temp_bcs = [];\n          //construyo un array con las temporadas de breaking bad\n          for (let i=1; i<=temporada_bb; i+=1){\n            temp_bb.push(i);\n          }\n          //construyo un array con las temporadas de better call saul\n          for (let i=1; i<=temporada_bcs; i+=1){\n            temp_bcs.push(i);\n          }\n          //Construyo un array con todas las temporadas\n          var total_temporadas = [temp_bb, temp_bcs];\n            this.setState({\n                isLoaded: true,\n                temporadas: total_temporadas,\n                bool_buscado: false\n            })\n        });\n    }\n\n    clickHandler(valor){\n\n      //primero distinguir por serie\n      //si es una temporada de Breaking Bad\n      if (valor[1] == 'BCS'){\n        //busco en las temporadas de BB\n        var serie = 'Better+Call+Saul';\n        var t = valor[0]; //TEMPORADA\n      }\n      //si es una temporada de Better Call Saul\n      else{\n        var t = valor[0]; //TEMPORADA\n        var serie = 'Breaking+Bad';\n        //busco en las temporadas de Better Call Saul\n      }\n\n      fetch(`https://tarea-1-breaking-bad.herokuapp.com/api/episodes?series=${serie}`,\n      {\n        method: \"GET\",\n        \n      }\n    ).then(res => res.json())\n    .then(resultado_json => {\n      //defino un array vacio\n      var array_titulos = [];\n      //recorro todos los episodios\n      for (let i=0; i<resultado_json.length; i+=1){\n        //reviso si corresponde a la temporada buscada\n        if (resultado_json[i].season == t ){\n          //guardo el titulo en mi array\n          var titulo = resultado_json[i];\n          array_titulos.push(titulo)\n        }\n        \n      }\n      this.setState({\n        bool_episodes: true,\n        episodes: array_titulos,\n        bool_personaje: false,\n        bool_episodio: false,\n        bool_buscado: false,\n      })\n      \n    });\n    }\n\n    episodeClicked(valor){\n\n      this.setState({\n        bool_episodio: true,\n        episodio: valor,\n        bool_episodes: false,\n        //aca hice un cambio (agregue la linea de abajo)\n        bool_personaje: false,\n        bool_buscado: false,\n      })\n    }\n\n    characterClicked(valor){\n      //console.log(\"aki estoy\")\n      //tengo que buscar toda la informacion sobre el personaje recibido en valor y mostrarla, las temporadas deben ser clickeables\n      var nombre = valor.split(\" \");\n      var string_listo = \"\"\n      for (let i=0; i<nombre.length; i+=1){\n        if (i!=0)\n        {var string_parcial = \"+\"+ nombre[i] }\n        else{var string_parcial = nombre[i]}\n        string_listo =  string_listo + string_parcial\n      }\n      //console.log(string_listo)\n      Promise.all([\n        fetch(`https://tarea-1-breaking-bad.herokuapp.com/api/characters?name=${string_listo}`,\n      {\n        method: \"GET\"\n        \n      }).then(res => res.json()),\n      fetch(`https://tarea-1-breaking-bad.herokuapp.com/api/quote?author=${string_listo}`,\n      {\n        method: \"GET\"\n        \n      }).then(res => res.json())\n      ]).then(([urlOneData, urlTwoData]) => {\n        \n        this.setState({\n            bool_personaje: true,\n            bool_episodio: false,\n            bool_episodes: false,\n            personaje: urlOneData,\n            bool_buscado: false,\n            quotes_personaje:urlTwoData\n        });\n      }) \n    }\n\n    searchHandler(valor) {\n      this.setState({\n        value: valor.target.value});\n    }\n     handleSubmit(event){\n      //busco los personajes de 10 en 10 y voy iterando hasta que los tengo todos\n      var buscado = this.state.value //variable que contiene el texto ingresado en la busqueda\n      \n      \n      var lista_personajes = []\n      \n      //if (buscado.length == 0)\n      //{\n        for (let i=0; i<10; i+=1)//mientras que las paginas tengan 10 elementos sigo buscando\n        { \n          //busco la primera pagina\n         \n          fetch(`https://tarea-1-breaking-bad.herokuapp.com/api/characters?name=${buscado}&limit=10&offset=${i*10}`,\n      {\n        method: \"GET\"\n        \n      }).then(res => res.json())\n      .then(resultado_json => {\n        if (resultado_json.length > 0){\n          \n          resultado_json.map(resultado => (lista_personajes.push(resultado.name)))\n        }\n        \n        this.setState({\n          //ista_personaje_state: lista_personajes,\n          bool_buscado: true,\n          bool_episodes: false,\n          bool_episodio: false,\n          bool_personaje: false,\n          lista_personaje_state: lista_personajes\n        });\n      })\n        }\n     // }\n      //else {\n        /*fetch(`https://tarea-1-breaking-bad.herokuapp.com/api/characters?name=${buscado}`,\n      {\n        method: \"GET\"\n        \n      }).then(res => res.json())\n      .then(resultado_json=> {\n        //console.log(resultado_json)\n        var lista_personajes = []\n        resultado_json.map(personaje=> (lista_personajes.push(personaje.name)))\n        this.setState({\n          lista_personaje_state: lista_personajes,\n          bool_buscado: true,\n          bool_episodes: false,\n          bool_episodio: false,\n          bool_personaje: false\n        });\n        \n      })*/\n      //}\n      event.preventDefault();\n    }\n\n    homeClicked(){\n      this.setState({\n        bool_buscado: false,\n        bool_episodes: false,\n        bool_episodio: false,\n        bool_personaje: false\n      });\n    }\n\n    render() {\n      \n        var {isLoaded, temporadas, bool_episodes, episodes, episodio, bool_episodio, bool_personaje, personaje, quotes_personaje, lista_personaje_state, bool_buscado} = this.state;\n\n      //si debo mostrar la informacion de un episodio\n      if (bool_buscado){\n        return (\n         <body>\n           <div >\n            <div id=\"buscador\">\n              <form align=\"right\" onSubmit={this.handleSubmit}>\n              <br></br>\n              <br></br>\n                <label > \n                  Buscador\n                  <input type=\"text\" value={this.state.value} onChange = {this.searchHandler}></input>\n                </label>\n                  <input type=\"submit\" value=\"Submit\"></input>\n              </form>\n            </div>\n            <div id=\"inicio\">\n            <h1 id=\"titulo-inicio\">Resultados</h1>\n            <div id=\"episodios\">\n            {lista_personaje_state.map(personaje=>(\n            <ul> \n              <button id=\"btn-personaje\"onClick={this.characterClicked.bind(this, personaje)}>{personaje}</button>\n            </ul>))}\n            </div>\n            \n            </div>\n            <button id=\"button-back\" onClick={this.homeClicked.bind(this)}>Volver al Inicio</button>\n          </div>\n         </body>\n          \n        )\n      }\n      else {\n        if (bool_personaje){\n          if (personaje[0].appearance.length == 0){\n            personaje[0].appearance = []}\n          if (personaje[0].better_call_saul_appearance.length == 0){personaje[0].better_call_saul_appearance = []}\n          return (\n          <div id=\"general\">\n            <div id=\"buscador\">\n              <form align=\"right\" onSubmit={this.handleSubmit}>\n              <br></br>\n              <br></br>\n                <label > \n                  Buscador\n                  <input type=\"text\" value={this.state.value} onChange = {this.searchHandler}></input>\n                </label>\n                  <input type=\"submit\" value=\"Submit\"></input>\n              </form>\n            </div>\n\n            <div id=\"inicio\">\n              <h1 id=\"titulo-inicio\">{personaje[0].name}</h1><img id=\"imagen\" src={personaje[0].img} width=\"150\" height=\"200\"></img>\n              <h3>Nickname: {personaje[0].nickname}</h3> \n              <h3>Actor: {personaje[0].portrayed}</h3>\n              \n              <h3>Categoría: {personaje[0].category}</h3>\n              <h3>Status: {personaje[0].status}</h3>\n              <h3>Roles:   </h3>\n                {personaje[0].occupation.map(trabajos => (\n                  <li>{trabajos} </li>\n    \n                ))}\n                \n            \n              <h3>Apariciones en Breaking Bad : \n                {personaje[0].appearance.map(aparicion => (\n                  \n                    <button id=\"boton_aparicion\"  onClick={this.clickHandler.bind(this, [aparicion, \"BB\"])}>{aparicion} </button> \n    \n                ))}\n                \n              </h3>\n              <h3>Apariciones en Better Call Saul: \n                {personaje[0].better_call_saul_appearance.map(aparicion => (\n          \n                    <button id=\"boton_aparicion\" onClick={this.clickHandler.bind(this, [aparicion, \"BCS\"])}>{aparicion} </button>\n      \n    \n                ))}\n                \n              </h3>\n              <h3>Quotes:   </h3>\n                {quotes_personaje.map(quotes => (\n                  <li>{quotes.quote} </li>\n    \n                ))}\n  \n            </div>\n            <button id=\"button-back\" onClick={this.homeClicked.bind(this)}>Volver al Inicio</button>\n          </div>);\n        }\n        if (bool_episodio){\n          return (\n          <div id=\"general\">\n            <div id=\"buscador\">\n                <form align=\"right\" onSubmit={this.handleSubmit}>\n                  <br></br>\n                  <br></br>\n                  <label > \n                    Buscador\n                    <input type=\"text\" value={this.state.value} onChange = {this.searchHandler}></input>\n                    </label>\n                    <input type=\"submit\" value=\"Submit\"></input>\n                  </form>\n              </div>\n\n              <div id=\"inicio\">\n                <h1 id=\"titulo-inicio\">{episodio.title}</h1>\n                <div id=\"episodios\">\n                <h3>Temporada: {episodio.season}</h3>\n                <h3>Episodio: {episodio.episode}</h3>\n                <h3>Fecha de estreno: {episodio.air_date.substr(0, 10)}</h3>\n                <h3>Personajes: \n                  {episodio.characters.map(personaje => (\n                    <ul>\n                      <button id=\"btn-episode\"onClick={this.characterClicked.bind(this, personaje)}>{personaje}</button>\n                    </ul>\n      \n                  ))}\n                </h3>\n                </div>\n                \n              </div>\n              <button id=\"button-back\" onClick={this.homeClicked.bind(this)}>Volver al Inicio</button>\n          </div>);\n          \n        }\n        else {\n           //si debo mostrar los episodes\n           if (bool_episodes){\n            //aca estoy mostrando los episodes\n            return ( \n            <div id=\"general\"> \n              <div id=\"buscador\">\n                      <form align=\"right\" onSubmit={this.handleSubmit}>\n                      <br></br>\n                      <br></br>\n                        <label > \n                          Buscador\n                          <input type=\"text\" value={this.state.value} onChange = {this.searchHandler}></input>\n                        </label>\n                          <input type=\"submit\" value=\"Submit\"></input>\n                      </form>\n                    </div>\n                    <div id=\"inicio\">\n                      <h1 id=\"titulo-inicio\"> Episodios</h1>\n                      <div id=\"episodios\">\n                        {episodes.map(episodio => ( \n                          \n                          <ul >\n                            <a>{episodio.episode}. </a><button id=\"btn-episode\" onClick={this.episodeClicked.bind(this, episodio)}>{episodio.title}</button>\n                          </ul>))}\n                      </div>\n                      \n                    </div>\n                    <button id=\"button-back\" onClick={this.homeClicked.bind(this)}>Volver al Inicio</button>\n                  \n            </div>);\n            \n          }\n          //si debo mostrar las temporadas\n          else \n          {\n            if (!isLoaded) {\n              return (\n              <div id=\"general\">\n                <br></br>\n                <br></br>\n                <h1 align=\"center\">Cargando...</h1>\n              </div>);\n          }\n            else {\n            \n              return (\n                  <div id=\"general\">\n                    <div id=\"buscador\">\n                      <form align=\"right\" onSubmit={this.handleSubmit}>\n                      <br></br>\n                      <br></br>\n                        <label > \n                          Buscador\n                          <input type=\"text\" value={this.state.value} onChange = {this.searchHandler}></input>\n                        </label>\n                          <input type=\"submit\" value=\"Submit\"></input>\n                      </form>\n                    </div>\n                    \n                    \n                    <div id=\"inicio\">\n                    <h1 id=\"titulo-inicio\"> Better Call Saul</h1>\n                    <div id=\"temporadas\">\n                    <h2> Temporadas</h2>\n                    \n                    {temporadas[1].map(temporada => ( \n                       \n                   \n                        <button className='BB' id={temporada} onClick={this.clickHandler.bind(this,[temporada, 'BCS'])}>{temporada}</button>\n                     ))}\n                    </div>\n                    </div>\n                    \n                    <div id=\"inicio\">\n                    <h1 id=\"titulo-inicio\"> Breaking Bad</h1>\n                    <div id=\"temporadas\">\n                      <h2> Temporadas</h2>\n                      \n                      {temporadas[0].map(temporada => ( \n                        \n                          <button className='BB' id={temporada} onClick={this.clickHandler.bind(this, [temporada, 'BB'])}>{temporada}</button>\n                        ))}   \n                    </div>\n                    </div>\n                    \n                    \n                  </div>\n              \n                  \n              );\n          }\n          \n          }\n        }\n      }\n      \n\n       \n\n        \n    }\n \n    \n\n\n}\n\nexport default App;\n","/Users/elisafernandez/Desktop/tarea1final/src/reportWebVitals.js",[],{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","severity":1,"message":"34","line":48,"column":41,"nodeType":"35","messageId":"36","endLine":48,"endColumn":43},{"ruleId":"33","severity":1,"message":"34","line":101,"column":20,"nodeType":"35","messageId":"36","endLine":101,"endColumn":22},{"ruleId":"37","severity":1,"message":"38","line":108,"column":13,"nodeType":"39","messageId":"40","endLine":108,"endColumn":14},{"ruleId":"37","severity":1,"message":"41","line":109,"column":13,"nodeType":"39","messageId":"40","endLine":109,"endColumn":18},{"ruleId":"33","severity":1,"message":"34","line":125,"column":38,"nodeType":"35","messageId":"36","endLine":125,"endColumn":40},{"ruleId":"33","severity":1,"message":"42","line":161,"column":14,"nodeType":"35","messageId":"36","endLine":161,"endColumn":16},{"ruleId":"37","severity":1,"message":"43","line":163,"column":18,"nodeType":"39","messageId":"40","endLine":163,"endColumn":32},{"ruleId":"33","severity":1,"message":"34","line":300,"column":46,"nodeType":"35","messageId":"36","endLine":300,"endColumn":48},{"ruleId":"33","severity":1,"message":"34","line":302,"column":63,"nodeType":"35","messageId":"36","endLine":302,"endColumn":65},{"ruleId":"44","severity":1,"message":"45","line":318,"column":62,"nodeType":"46","endLine":318,"endColumn":127},{"ruleId":"47","severity":1,"message":"48","line":417,"column":29,"nodeType":"46","endLine":417,"endColumn":32},"no-native-reassign",["49"],"no-negated-in-lhs",["50"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-redeclare","'t' is already defined.","Identifier","redeclared","'serie' is already defined.","Expected '!==' and instead saw '!='.","'string_parcial' is already defined.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","no-global-assign","no-unsafe-negation"]