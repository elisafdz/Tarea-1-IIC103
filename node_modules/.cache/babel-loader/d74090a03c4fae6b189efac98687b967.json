{"ast":null,"code":"var _jsxFileName = \"/Users/elisafernandez/Desktop/tarea1final/src/App.js\";\nimport React, { Component } from 'react';\nimport { string } from 'postcss-selector-parser';\nimport { promised } from 'q';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      temporadas: [],\n      isLoaded: false,\n      bool_episodes: false,\n      episodes: [],\n      episodio: '',\n      bool_episodio: false,\n      personaje: '',\n      bool_personaje: false,\n      quotes_personaje: '',\n      value: ''\n    };\n    this.searchHandler = this.searchHandler.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    fetch('https://tarea-1-breaking-bad.herokuapp.com/api/episodes', {\n      method: \"GET\"\n    }).then(res => res.json()).then(resultado_json => {\n      var temporada_bb = 0;\n      var temporada_bcs = 0;\n      var episodios_bb = [];\n      var episodios_bcs = []; //console.log(`${resultado_json.length}`);\n      //recorro todos los episodios obtenidos y separo por serie\n\n      for (let i = 0; i < resultado_json.length; i += 1) {\n        //si es que es de Breaking bad lo agrego al array de bb\n        if (resultado_json[i].series == 'Breaking Bad') {\n          episodios_bb.push(resultado_json[i]);\n        } //si es que no es de bb, lo agrego al array de bcs\n        else {\n            episodios_bcs.push(resultado_json[i]);\n          }\n      } //recorro los episodios de bb y encuentro cuantas temporadas hay\n\n\n      for (let i = 0; i < episodios_bb.length; i += 1) {\n        var temporadas_provisoria_bb = episodios_bb[i].season;\n\n        if (parseInt(temporadas_provisoria_bb) > parseInt(temporada_bb)) {\n          temporada_bb = temporadas_provisoria_bb;\n        }\n      } //recorro los episodios de bcs y encuentro cuantas temporadas hay\n\n\n      for (let i = 0; i < episodios_bcs.length; i += 1) {\n        var temporadas_provisoria_bcs = episodios_bcs[i].season;\n\n        if (parseInt(temporadas_provisoria_bcs) > parseInt(temporada_bcs)) {\n          temporada_bcs = temporadas_provisoria_bcs;\n        }\n      }\n\n      var temp_bb = [];\n      var temp_bcs = []; //construyo un array con las temporadas de breaking bad\n\n      for (let i = 1; i <= temporada_bb; i += 1) {\n        temp_bb.push(i);\n      } //construyo un array con las temporadas de better call saul\n\n\n      for (let i = 1; i <= temporada_bcs; i += 1) {\n        temp_bcs.push(i);\n      } //Construyo un array con todas las temporadas\n\n\n      var total_temporadas = [temp_bb, temp_bcs];\n      this.setState({\n        isLoaded: true,\n        temporadas: total_temporadas\n      });\n    });\n  }\n\n  clickHandler(valor) {\n    //primero distinguir por serie\n    //si es una temporada de Breaking Bad\n    if (valor[1] == 'BCS') {\n      //busco en las temporadas de BB\n      var serie = 'Better+Call+Saul';\n      var t = valor[0]; //TEMPORADA\n    } //si es una temporada de Better Call Saul\n    else {\n        var t = valor[0]; //TEMPORADA\n\n        var serie = 'Breaking+Bad'; //busco en las temporadas de Better Call Saul\n      }\n\n    fetch(`https://tarea-1-breaking-bad.herokuapp.com/api/episodes?series=${serie}`, {\n      method: \"GET\"\n    }).then(res => res.json()).then(resultado_json => {\n      //defino un array vacio\n      var array_titulos = []; //recorro todos los episodios\n\n      for (let i = 0; i < resultado_json.length; i += 1) {\n        //reviso si corresponde a la temporada buscada\n        if (resultado_json[i].season == t) {\n          //guardo el titulo en mi array\n          var titulo = resultado_json[i];\n          array_titulos.push(titulo);\n        }\n      }\n\n      this.setState({\n        bool_episodes: true,\n        episodes: array_titulos,\n        bool_personaje: false,\n        bool_episodio: false\n      });\n    });\n  }\n\n  episodeClicked(valor) {\n    this.setState({\n      bool_episodio: true,\n      episodio: valor,\n      bool_episodes: false\n    });\n  }\n\n  characterClicked(valor) {\n    //console.log(\"aki estoy\")\n    //tengo que buscar toda la informacion sobre el personaje recibido en valor y mostrarla, las temporadas deben ser clickeables\n    var nombre = valor.split(\" \");\n    var string_listo = \"\";\n\n    for (let i = 0; i < nombre.length; i += 1) {\n      if (i != 0) {\n        var string_parcial = \"+\" + nombre[i];\n      } else {\n        var string_parcial = nombre[i];\n      }\n\n      string_listo = string_listo + string_parcial;\n    } //console.log(string_listo)\n\n\n    Promise.all([fetch(`https://tarea-1-breaking-bad.herokuapp.com/api/characters?name=${string_listo}`, {\n      method: \"GET\"\n    }).then(res => res.json()), fetch(`https://tarea-1-breaking-bad.herokuapp.com/api/quote?author=${string_listo}`, {\n      method: \"GET\"\n    }).then(res => res.json())]).then(([urlOneData, urlTwoData]) => {\n      this.setState({\n        bool_personaje: true,\n        personaje: urlOneData,\n        quotes_personaje: urlTwoData\n      });\n    });\n  }\n\n  searchHandler(valor) {\n    this.setState({\n      value: valor.target.value\n    });\n  }\n\n  handleSubmit(event) {\n    //busco los personajes de 10 en 10 y voy iterando hasta que los tengo todos\n    var buscado = this.state.value; //variable que contiene el texto ingresado en la busqueda\n    //1. Obtengo todos los personajes\n\n    const lista_personajes = [];\n\n    for (let i = 0; i <= 6; i += 1) {\n      var multiplicador = i * 10;\n      fetch(`https://tarea-1-breaking-bad.herokuapp.com/api/characters?limit=10&offset=${multiplicador}`, {\n        method: \"GET\"\n      }).then(res => res.json()).then(resultado_json => {\n        resultado_json.forEach(resultado => lista_personajes.push(resultado.name));\n      });\n    } //tengo todos los personajes en lista personajes\n    //2. Busco en los personajes los que tienen buscado \n\n\n    console.log(typeof lista_personajes);\n    console.log(lista_personajes.length);\n    console.log(lista_personajes);\n\n    for (let i = 0; i < lista_personajes.length; i += 1) {\n      console.log(lista_personajes[i]);\n    } //3. muestro una lista con los personajes correspondientes\n    //busco a todos los personajes de todas las series y dps entrego una lista con todos los que tienen el texto ingresado.\n\n\n    event.preventDefault();\n  }\n\n  render() {\n    var {\n      isLoaded,\n      temporadas,\n      bool_episodes,\n      episodes,\n      episodio,\n      bool_episodio,\n      bool_personaje,\n      personaje,\n      quotes_personaje\n    } = this.state; //si debo mostrar la informacion de un episodio\n\n    if (bool_personaje) {\n      if (personaje[0].appearance.length == 0) {\n        personaje[0].appearance = [];\n      }\n\n      if (personaje[0].better_call_saul_appearance.length == 0) {\n        personaje[0].better_call_saul_appearance = [];\n      }\n\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: personaje[0].name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Nickname: \", personaje[0].nickname]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Actor: \", personaje[0].portrayed]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: personaje[0].img,\n          width: \"150\",\n          height: \"200\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Categor\\xEDa: \", personaje[0].category]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Status: \", personaje[0].status]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Roles:   \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 11\n        }, this), personaje[0].occupation.map(trabajos => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [trabajos, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 15\n        }, this)), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Apariciones en Breaking Bad :\", personaje[0].appearance.map(aparicion => /*#__PURE__*/_jsxDEV(\"button\", {\n            id: \"boton_aparicion_bb\",\n            onClick: this.clickHandler.bind(this, [aparicion, \"BB\"]),\n            children: [aparicion, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Apariciones en Better Call Saul:\", personaje[0].better_call_saul_appearance.map(aparicion => /*#__PURE__*/_jsxDEV(\"button\", {\n            id: \"boton_aparicion_bcs\",\n            onClick: this.clickHandler.bind(this, [aparicion, \"BCS\"]),\n            children: [aparicion, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Quotes:   \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 11\n        }, this), quotes_personaje.map(quotes => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [quotes.quote, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 17\n      }, this);\n    }\n\n    if (bool_episodio) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: episodio.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Temporada: \", episodio.season]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Episodio: \", episodio.episode]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Fecha de estreno: \", episodio.air_date.substr(0, 10)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Personajes:\", episodio.characters.map(personaje => /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: this.characterClicked.bind(this, personaje),\n              children: personaje\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 274,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 17\n      }, this);\n    } else {\n      //si debo mostrar los episodes\n      if (bool_episodes) {\n        //aca estoy mostrando los episodes\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \" Episodios\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 17\n          }, this), episodes.map(episodio => /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: [/*#__PURE__*/_jsxDEV(\"a\", {\n              children: [episodio.episode, \". \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 291,\n              columnNumber: 26\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: this.episodeClicked.bind(this, episodio),\n              children: episodio.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 291,\n              columnNumber: 53\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 290,\n            columnNumber: 24\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 20\n        }, this);\n      } //si debo mostrar las temporadas\n      else {\n          if (!isLoaded) {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              children: \" Cargando...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 300,\n              columnNumber: 20\n            }, this);\n          } else {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              align: \"center\",\n              children: [/*#__PURE__*/_jsxDEV(\"form\", {\n                align: \"right\",\n                onSubmit: this.handleSubmit,\n                children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 307,\n                  columnNumber: 20\n                }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 308,\n                  columnNumber: 20\n                }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                  children: [\"Buscador\", /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"text\",\n                    value: this.state.value,\n                    onChange: this.searchHandler\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 311,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 309,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"submit\",\n                  value: \"Submit\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 313,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 306,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n                children: \" Better Call Saul\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 317,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n                children: \" Temporadas\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 318,\n                columnNumber: 19\n              }, this), temporadas[1].map(temporada => /*#__PURE__*/_jsxDEV(\"ul\", {\n                children: /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"BCS\",\n                  id: temporada,\n                  onClick: this.clickHandler.bind(this, [temporada, 'BCS']),\n                  children: temporada\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 323,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 322,\n                columnNumber: 23\n              }, this)), /*#__PURE__*/_jsxDEV(\"h1\", {\n                children: \" Breaking Bad\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 325,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n                children: \" Temporadas\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 326,\n                columnNumber: 19\n              }, this), temporadas[0].map(temporada => /*#__PURE__*/_jsxDEV(\"ul\", {\n                children: /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"BB\",\n                  id: temporada,\n                  onClick: this.clickHandler.bind(this, [temporada, 'BB']),\n                  children: temporada\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 330,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 329,\n                columnNumber: 23\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 305,\n              columnNumber: 17\n            }, this);\n          }\n        }\n    }\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/elisafernandez/Desktop/tarea1final/src/App.js"],"names":["React","Component","string","promised","App","constructor","props","state","temporadas","isLoaded","bool_episodes","episodes","episodio","bool_episodio","personaje","bool_personaje","quotes_personaje","value","searchHandler","bind","handleSubmit","componentDidMount","fetch","method","then","res","json","resultado_json","temporada_bb","temporada_bcs","episodios_bb","episodios_bcs","i","length","series","push","temporadas_provisoria_bb","season","parseInt","temporadas_provisoria_bcs","temp_bb","temp_bcs","total_temporadas","setState","clickHandler","valor","serie","t","array_titulos","titulo","episodeClicked","characterClicked","nombre","split","string_listo","string_parcial","Promise","all","urlOneData","urlTwoData","target","event","buscado","lista_personajes","multiplicador","forEach","resultado","name","console","log","preventDefault","render","appearance","better_call_saul_appearance","nickname","portrayed","img","category","status","occupation","map","trabajos","aparicion","quotes","quote","title","episode","air_date","substr","characters","temporada"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { string } from 'postcss-selector-parser';\nimport { promised } from 'q';\n\n\n\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n                temporadas: [],\n                isLoaded: false,\n                bool_episodes: false,\n                episodes: [],\n                episodio: '',\n                bool_episodio: false,\n                personaje: '',\n                bool_personaje: false,\n                quotes_personaje: '',\n                value: ''\n        }\n        this.searchHandler = this.searchHandler.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n    \n\n    componentDidMount() {\n         fetch('https://tarea-1-breaking-bad.herokuapp.com/api/episodes',\n      {\n        method: \"GET\",\n        \n      }\n    )\n        .then(res => res.json())\n        .then(resultado_json => {\n          var temporada_bb = 0;\n          var temporada_bcs = 0;\n          var episodios_bb = [];\n          var episodios_bcs = [];\n         //console.log(`${resultado_json.length}`);\n\n          //recorro todos los episodios obtenidos y separo por serie\n          for (let i=0; i<resultado_json.length; i+=1){\n            \n            //si es que es de Breaking bad lo agrego al array de bb\n            if(resultado_json[i].series =='Breaking Bad'){\n              \n              episodios_bb.push(resultado_json[i]);\n            }\n            //si es que no es de bb, lo agrego al array de bcs\n            else {\n              episodios_bcs.push(resultado_json[i]);}\n          }\n\n          //recorro los episodios de bb y encuentro cuantas temporadas hay\n          for (let i=0; i<episodios_bb.length; i+=1)\n          {\n            var temporadas_provisoria_bb = episodios_bb[i].season;\n            if (parseInt(temporadas_provisoria_bb) > parseInt(temporada_bb)){\n              temporada_bb = temporadas_provisoria_bb;\n            }\n            \n          }\n\n          //recorro los episodios de bcs y encuentro cuantas temporadas hay\n          for (let i=0; i<episodios_bcs.length; i+=1)\n          {\n            var temporadas_provisoria_bcs = episodios_bcs[i].season;\n            if (parseInt(temporadas_provisoria_bcs) > parseInt(temporada_bcs)){\n              temporada_bcs = temporadas_provisoria_bcs;\n            }\n            \n          }\n\n          var temp_bb = [];\n          var temp_bcs = [];\n          //construyo un array con las temporadas de breaking bad\n          for (let i=1; i<=temporada_bb; i+=1){\n            temp_bb.push(i);\n          }\n          //construyo un array con las temporadas de better call saul\n          for (let i=1; i<=temporada_bcs; i+=1){\n            temp_bcs.push(i);\n          }\n          //Construyo un array con todas las temporadas\n          var total_temporadas = [temp_bb, temp_bcs];\n            this.setState({\n                isLoaded: true,\n                temporadas: total_temporadas\n            })\n        });\n    }\n\n    clickHandler(valor){\n\n      //primero distinguir por serie\n      //si es una temporada de Breaking Bad\n      if (valor[1] == 'BCS'){\n        //busco en las temporadas de BB\n        var serie = 'Better+Call+Saul';\n        var t = valor[0]; //TEMPORADA\n      }\n      //si es una temporada de Better Call Saul\n      else{\n        var t = valor[0]; //TEMPORADA\n        var serie = 'Breaking+Bad';\n        //busco en las temporadas de Better Call Saul\n      }\n\n      fetch(`https://tarea-1-breaking-bad.herokuapp.com/api/episodes?series=${serie}`,\n      {\n        method: \"GET\",\n        \n      }\n    ).then(res => res.json())\n    .then(resultado_json => {\n      //defino un array vacio\n      var array_titulos = [];\n      //recorro todos los episodios\n      for (let i=0; i<resultado_json.length; i+=1){\n        //reviso si corresponde a la temporada buscada\n        if (resultado_json[i].season == t ){\n          //guardo el titulo en mi array\n          var titulo = resultado_json[i];\n          array_titulos.push(titulo)\n        }\n        \n      }\n      this.setState({\n        bool_episodes: true,\n        episodes: array_titulos,\n        bool_personaje: false,\n        bool_episodio: false\n      })\n      \n    });\n    }\n\n    episodeClicked(valor){\n\n      this.setState({\n        bool_episodio: true,\n        episodio: valor,\n        bool_episodes: false\n      })\n    }\n\n    characterClicked(valor){\n      //console.log(\"aki estoy\")\n      //tengo que buscar toda la informacion sobre el personaje recibido en valor y mostrarla, las temporadas deben ser clickeables\n      var nombre = valor.split(\" \");\n      var string_listo = \"\"\n      for (let i=0; i<nombre.length; i+=1){\n        if (i!=0)\n        {var string_parcial = \"+\"+ nombre[i] }\n        else{var string_parcial = nombre[i]}\n        string_listo =  string_listo + string_parcial\n      }\n      //console.log(string_listo)\n      Promise.all([\n        fetch(`https://tarea-1-breaking-bad.herokuapp.com/api/characters?name=${string_listo}`,\n      {\n        method: \"GET\"\n        \n      }).then(res => res.json()),\n      fetch(`https://tarea-1-breaking-bad.herokuapp.com/api/quote?author=${string_listo}`,\n      {\n        method: \"GET\"\n        \n      }).then(res => res.json())\n      ]).then(([urlOneData, urlTwoData]) => {\n        \n        this.setState({\n            bool_personaje: true,\n            personaje: urlOneData,\n            quotes_personaje:urlTwoData\n        });\n      }) \n    }\n\n    searchHandler(valor) {\n      this.setState({\n        value: valor.target.value});\n    }\n    handleSubmit(event){\n      //busco los personajes de 10 en 10 y voy iterando hasta que los tengo todos\n      var buscado = this.state.value //variable que contiene el texto ingresado en la busqueda\n      //1. Obtengo todos los personajes\n      const lista_personajes = []\n      for (let i=0; i<=6; i+=1){\n        var multiplicador = i * 10;\n        fetch(`https://tarea-1-breaking-bad.herokuapp.com/api/characters?limit=10&offset=${multiplicador}`,\n        {\n          method: \"GET\"\n        \n        }).then(res => res.json())\n        .then(resultado_json => {\n          resultado_json.forEach(resultado => lista_personajes.push(resultado.name))\n          \n        })\n      }\n      //tengo todos los personajes en lista personajes\n      //2. Busco en los personajes los que tienen buscado \n      console.log(typeof(lista_personajes))\n      console.log(lista_personajes.length)\n      console.log(lista_personajes)\n      for (let i=0; i< lista_personajes.length; i+=1){\n        console.log(lista_personajes[i])\n      }\n      //3. muestro una lista con los personajes correspondientes\n      \n      //busco a todos los personajes de todas las series y dps entrego una lista con todos los que tienen el texto ingresado.\n      event.preventDefault();\n    }\n\n    render() {\n      \n        var {isLoaded, temporadas, bool_episodes, episodes, episodio, bool_episodio, bool_personaje, personaje,quotes_personaje} = this.state;\n\n      //si debo mostrar la informacion de un episodio\n      if (bool_personaje){\n        if (personaje[0].appearance.length == 0){\n          personaje[0].appearance = []}\n        if (personaje[0].better_call_saul_appearance.length == 0){personaje[0].better_call_saul_appearance = []}\n        return (<div>\n          <h1>{personaje[0].name}</h1>\n          <h3>Nickname: {personaje[0].nickname}</h3> \n          <h3>Actor: {personaje[0].portrayed}</h3>\n          <img src={personaje[0].img} width=\"150\" height=\"200\"></img>\n          <h3>Categoría: {personaje[0].category}</h3>\n          <h3>Status: {personaje[0].status}</h3>\n          <h3>Roles:   </h3>\n            {personaje[0].occupation.map(trabajos => (\n              <li>{trabajos} </li>\n\n            ))}\n            \n        \n          <h3>Apariciones en Breaking Bad : \n            {personaje[0].appearance.map(aparicion => (\n              \n                <button id=\"boton_aparicion_bb\"  onClick={this.clickHandler.bind(this, [aparicion, \"BB\"])}>{aparicion} </button> \n\n            ))}\n            \n          </h3>\n          <h3>Apariciones en Better Call Saul: \n            {personaje[0].better_call_saul_appearance.map(aparicion => (\n       \n                <button id=\"boton_aparicion_bcs\" onClick={this.clickHandler.bind(this, [aparicion, \"BCS\"])}>{aparicion} </button>\n   \n\n            ))}\n            \n          </h3>\n          <h3>Quotes:   </h3>\n            {quotes_personaje.map(quotes => (\n              <li>{quotes.quote} </li>\n\n            ))}\n\n        </div>);\n      }\n      if (bool_episodio){\n        return (<div>\n          <h1>{episodio.title}</h1>\n          <h3>Temporada: {episodio.season}</h3>\n          <h3>Episodio: {episodio.episode}</h3>\n          <h3>Fecha de estreno: {episodio.air_date.substr(0, 10)}</h3>\n          <h3>Personajes: \n            {episodio.characters.map(personaje => (\n              <ul>\n                <button onClick={this.characterClicked.bind(this, personaje)}>{personaje}</button>\n              </ul>\n\n            ))}\n          </h3>\n        </div>);\n        \n      }\n      else {\n         //si debo mostrar los episodes\n         if (bool_episodes){\n          //aca estoy mostrando los episodes\n          return ( <div> \n                <h1> Episodios</h1>\n                {episodes.map(episodio => ( \n                       \n                       <ul >\n                         <a>{episodio.episode}. </a><button onClick={this.episodeClicked.bind(this, episodio)}>{episodio.title}</button>\n                       </ul>))}\n          </div>);\n          \n        }\n        //si debo mostrar las temporadas\n        else \n        {\n          if (!isLoaded) {\n            return <div> Cargando...</div>;\n        }\n          else {\n          \n            return (\n                <div align=\"center\">\n                  <form align=\"right\" onSubmit={this.handleSubmit}>\n                   <br></br>\n                   <br></br>\n                    <label > \n                      Buscador\n                      <input type=\"text\" value={this.state.value} onChange = {this.searchHandler}></input>\n                    </label>\n                      <input type=\"submit\" value=\"Submit\"></input>\n                  </form>\n                  \n                  \n                  <h1> Better Call Saul</h1>\n                  <h2> Temporadas</h2>\n                  \n                    {temporadas[1].map(temporada => ( \n                       \n                      <ul >\n                        <button className='BCS' id={temporada} onClick={this.clickHandler.bind(this,[temporada, 'BCS'])}>{temporada}</button>\n                      </ul>))}\n                  <h1> Breaking Bad</h1>\n                  <h2> Temporadas</h2>\n                  \n                    {temporadas[0].map(temporada => ( \n                      <ul >\n                        <button className='BB' id={temporada} onClick={this.clickHandler.bind(this, [temporada, 'BB'])}>{temporada}</button>\n                      </ul>))}   \n                </div>\n            \n                \n            );\n        }\n        \n        }\n      }\n\n       \n\n        \n    }\n \n    \n\n\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}