{"ast":null,"code":"var _jsxFileName = \"/Users/elisafernandez/Desktop/tarea1final/src/App.js\";\nimport React, { Component } from 'react';\nimport { string } from 'postcss-selector-parser';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      temporadas: [],\n      isLoaded: false,\n      bool_episodes: false,\n      episodes: [],\n      episodio: '',\n      bool_episodio: false,\n      personaje: '',\n      bool_personaje: false\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://tarea-1-breaking-bad.herokuapp.com/api/episodes', {\n      method: \"GET\"\n    }).then(res => res.json()).then(resultado_json => {\n      var temporada_bb = 0;\n      var temporada_bcs = 0;\n      var episodios_bb = [];\n      var episodios_bcs = []; //console.log(`${resultado_json.length}`);\n      //recorro todos los episodios obtenidos y separo por serie\n\n      for (let i = 0; i < resultado_json.length; i += 1) {\n        //si es que es de Breaking bad lo agrego al array de bb\n        if (resultado_json[i].series == 'Breaking Bad') {\n          episodios_bb.push(resultado_json[i]);\n        } //si es que no es de bb, lo agrego al array de bcs\n        else {\n            episodios_bcs.push(resultado_json[i]);\n          }\n      } //recorro los episodios de bb y encuentro cuantas temporadas hay\n\n\n      for (let i = 0; i < episodios_bb.length; i += 1) {\n        var temporadas_provisoria_bb = episodios_bb[i].season;\n\n        if (parseInt(temporadas_provisoria_bb) > parseInt(temporada_bb)) {\n          temporada_bb = temporadas_provisoria_bb;\n        }\n      } //recorro los episodios de bcs y encuentro cuantas temporadas hay\n\n\n      for (let i = 0; i < episodios_bcs.length; i += 1) {\n        var temporadas_provisoria_bcs = episodios_bcs[i].season;\n\n        if (parseInt(temporadas_provisoria_bcs) > parseInt(temporada_bcs)) {\n          temporada_bcs = temporadas_provisoria_bcs;\n        }\n      }\n\n      var temp_bb = [];\n      var temp_bcs = []; //construyo un array con las temporadas de breaking bad\n\n      for (let i = 1; i <= temporada_bb; i += 1) {\n        temp_bb.push(i);\n      } //construyo un array con las temporadas de better call saul\n\n\n      for (let i = 1; i <= temporada_bcs; i += 1) {\n        temp_bcs.push(i);\n      } //Construyo un array con todas las temporadas\n\n\n      var total_temporadas = [temp_bb, temp_bcs];\n      this.setState({\n        isLoaded: true,\n        temporadas: total_temporadas\n      });\n    });\n  }\n\n  clickHandler(valor) {\n    //primero distinguir por serie\n    //si es una temporada de Breaking Bad\n    if (valor[1] == 'BCS') {\n      //busco en las temporadas de BB\n      var serie = 'Better+Call+Saul';\n      var t = valor[0]; //TEMPORADA\n    } //si es una temporada de Better Call Saul\n    else {\n        var t = valor[0]; //TEMPORADA\n\n        var serie = 'Breaking+Bad'; //busco en las temporadas de Better Call Saul\n      }\n\n    fetch(`https://tarea-1-breaking-bad.herokuapp.com/api/episodes?series=${serie}`, {\n      method: \"GET\"\n    }).then(res => res.json()).then(resultado_json => {\n      //defino un array vacio\n      var array_titulos = []; //recorro todos los episodios\n\n      for (let i = 0; i < resultado_json.length; i += 1) {\n        //reviso si corresponde a la temporada buscada\n        if (resultado_json[i].season == t) {\n          //guardo el titulo en mi array\n          var titulo = resultado_json[i];\n          array_titulos.push(titulo);\n        }\n      }\n\n      this.setState({\n        bool_episodes: true,\n        episodes: array_titulos\n      });\n    });\n  }\n\n  episodeClicked(valor) {\n    this.setState({\n      bool_episodio: true,\n      episodio: valor,\n      bool_episodes: false\n    });\n  }\n\n  characterClicked(valor) {\n    console.log(\"aki estoy\"); //tengo que buscar toda la informacion sobre el personaje recibido en valor y mostrarla, las temporadas deben ser clickeables\n\n    var nombre = valor.split(\" \");\n    console.log(nombre);\n\n    for (let i = 0; i < nombre.lenght; i += 1) {\n      if (i != 0) {\n        var string_parcial = \"+\" + nombre[i];\n      } else {\n        var string_parcial = nombre[i];\n      }\n\n      var string_listo = string_listo + string_parcial;\n    }\n\n    console.log(string_listo);\n    fetch(`https://tarea-1-breaking-bad.herokuapp.com/api/characters?name=${string_listo}`, {\n      method: \"GET\"\n    }).then(res => res.json()).then(resultado_json => {\n      //resultado_json tiene toda la informacion del personaje\n      this.setState({\n        bool_personaje: false,\n        personaje: resultado_json\n      });\n    });\n  }\n\n  render() {\n    var {\n      isLoaded,\n      temporadas,\n      bool_episodes,\n      episodes,\n      episodio,\n      bool_episodio,\n      bool_personaje,\n      personaje\n    } = this.state; //si debo mostrar la informacion de un episodio\n\n    if (bool_personaje) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: personaje.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Nacimiento: \", personaje.birthday]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Nickname: \", personaje.nickname]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Actor: \", personaje.portrayed]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Status: \", personaje.status]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Ocupaciones:\", personaje.ocupations.map(trabajos => /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: trabajos\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 183,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Temporadas:\", personaje.appearance.map(apariciones => /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              children: apariciones\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 192,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 16\n      }, this);\n    }\n\n    if (bool_episodio) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: episodio.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Temporada: \", episodio.season]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Episodio: \", episodio.episode]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Fecha de estreno: \", episodio.air_date.substr(0, 9)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Personajes:\", episodio.characters.map(personaje => /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: this.characterClicked.bind(this, personaje),\n              children: personaje\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 209,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 16\n      }, this);\n    } else {\n      //si debo mostrar los episodes\n      if (bool_episodes) {\n        //aca estoy mostrando los episodes\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \" Episodios\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 17\n          }, this), episodes.map(episodio => /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: [/*#__PURE__*/_jsxDEV(\"a\", {\n              children: [episodio.episode, \". \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 226,\n              columnNumber: 26\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: this.episodeClicked.bind(this, episodio),\n              children: episodio.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 226,\n              columnNumber: 53\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 24\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 19\n        }, this);\n      } //si debo mostrar las temporadas\n      else {\n          if (!isLoaded) {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              children: \" Cargando...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 235,\n              columnNumber: 20\n            }, this);\n          } else {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n                children: \" Better Call Saul\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 241,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n                children: \" Temporadas\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 242,\n                columnNumber: 19\n              }, this), temporadas[1].map(temporada => /*#__PURE__*/_jsxDEV(\"ul\", {\n                children: /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"BCS\",\n                  id: temporada,\n                  onClick: this.clickHandler.bind(this, [temporada, 'BCS']),\n                  children: temporada\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 247,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 246,\n                columnNumber: 23\n              }, this)), /*#__PURE__*/_jsxDEV(\"h1\", {\n                children: \" Breaking Bad\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 249,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n                children: \" Temporadas\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 250,\n                columnNumber: 19\n              }, this), temporadas[0].map(temporada => /*#__PURE__*/_jsxDEV(\"ul\", {\n                children: /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"BB\",\n                  id: temporada,\n                  onClick: this.clickHandler.bind(this, [temporada, 'BB']),\n                  children: temporada\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 254,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 253,\n                columnNumber: 23\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 240,\n              columnNumber: 17\n            }, this);\n          }\n        }\n    }\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/elisafernandez/Desktop/tarea1final/src/App.js"],"names":["React","Component","string","App","constructor","props","state","temporadas","isLoaded","bool_episodes","episodes","episodio","bool_episodio","personaje","bool_personaje","componentDidMount","fetch","method","then","res","json","resultado_json","temporada_bb","temporada_bcs","episodios_bb","episodios_bcs","i","length","series","push","temporadas_provisoria_bb","season","parseInt","temporadas_provisoria_bcs","temp_bb","temp_bcs","total_temporadas","setState","clickHandler","valor","serie","t","array_titulos","titulo","episodeClicked","characterClicked","console","log","nombre","split","lenght","string_parcial","string_listo","render","name","birthday","nickname","portrayed","status","ocupations","map","trabajos","appearance","apariciones","title","episode","air_date","substr","characters","bind","temporada"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { string } from 'postcss-selector-parser';\n\n\n\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n                temporadas: [],\n                isLoaded: false,\n                bool_episodes: false,\n                episodes: [],\n                episodio: '',\n                bool_episodio: false,\n                personaje: '',\n                bool_personaje: false\n        }\n    }\n    \n\n    componentDidMount() {\n         fetch('https://tarea-1-breaking-bad.herokuapp.com/api/episodes',\n      {\n        method: \"GET\",\n        \n      }\n    )\n        .then(res => res.json())\n        .then(resultado_json => {\n          var temporada_bb = 0;\n          var temporada_bcs = 0;\n          var episodios_bb = [];\n          var episodios_bcs = [];\n         //console.log(`${resultado_json.length}`);\n\n          //recorro todos los episodios obtenidos y separo por serie\n          for (let i=0; i<resultado_json.length; i+=1){\n            \n            //si es que es de Breaking bad lo agrego al array de bb\n            if(resultado_json[i].series =='Breaking Bad'){\n              \n              episodios_bb.push(resultado_json[i]);\n            }\n            //si es que no es de bb, lo agrego al array de bcs\n            else {\n              episodios_bcs.push(resultado_json[i]);}\n          }\n\n          //recorro los episodios de bb y encuentro cuantas temporadas hay\n          for (let i=0; i<episodios_bb.length; i+=1)\n          {\n            var temporadas_provisoria_bb = episodios_bb[i].season;\n            if (parseInt(temporadas_provisoria_bb) > parseInt(temporada_bb)){\n              temporada_bb = temporadas_provisoria_bb;\n            }\n            \n          }\n\n          //recorro los episodios de bcs y encuentro cuantas temporadas hay\n          for (let i=0; i<episodios_bcs.length; i+=1)\n          {\n            var temporadas_provisoria_bcs = episodios_bcs[i].season;\n            if (parseInt(temporadas_provisoria_bcs) > parseInt(temporada_bcs)){\n              temporada_bcs = temporadas_provisoria_bcs;\n            }\n            \n          }\n\n          var temp_bb = [];\n          var temp_bcs = [];\n          //construyo un array con las temporadas de breaking bad\n          for (let i=1; i<=temporada_bb; i+=1){\n            temp_bb.push(i);\n          }\n          //construyo un array con las temporadas de better call saul\n          for (let i=1; i<=temporada_bcs; i+=1){\n            temp_bcs.push(i);\n          }\n          //Construyo un array con todas las temporadas\n          var total_temporadas = [temp_bb, temp_bcs];\n            this.setState({\n                isLoaded: true,\n                temporadas: total_temporadas\n            })\n        });\n    }\n\n    clickHandler(valor){\n\n      //primero distinguir por serie\n      //si es una temporada de Breaking Bad\n      if (valor[1] == 'BCS'){\n        //busco en las temporadas de BB\n        var serie = 'Better+Call+Saul';\n        var t = valor[0]; //TEMPORADA\n      }\n      //si es una temporada de Better Call Saul\n      else{\n        var t = valor[0]; //TEMPORADA\n        var serie = 'Breaking+Bad';\n        //busco en las temporadas de Better Call Saul\n      }\n\n      fetch(`https://tarea-1-breaking-bad.herokuapp.com/api/episodes?series=${serie}`,\n      {\n        method: \"GET\",\n        \n      }\n    ).then(res => res.json())\n    .then(resultado_json => {\n      //defino un array vacio\n      var array_titulos = [];\n      //recorro todos los episodios\n      for (let i=0; i<resultado_json.length; i+=1){\n        //reviso si corresponde a la temporada buscada\n        if (resultado_json[i].season == t ){\n          //guardo el titulo en mi array\n          var titulo = resultado_json[i];\n          array_titulos.push(titulo)\n        }\n        \n      }\n      this.setState({\n        bool_episodes: true,\n        episodes: array_titulos,\n      })\n      \n    });\n    }\n\n    episodeClicked(valor){\n\n      this.setState({\n        bool_episodio: true,\n        episodio: valor,\n        bool_episodes: false\n      })\n    }\n\n    characterClicked(valor){\n      console.log(\"aki estoy\")\n      //tengo que buscar toda la informacion sobre el personaje recibido en valor y mostrarla, las temporadas deben ser clickeables\n      var nombre = valor.split(\" \");\n      console.log(nombre)\n      for (let i=0; i<nombre.lenght; i+=1){\n        if (i!=0)\n        {var string_parcial = \"+\"+ nombre[i] }\n        else{var string_parcial = nombre[i]}\n        var string_listo =  string_listo + string_parcial\n      }\n      console.log(string_listo)\n      fetch(`https://tarea-1-breaking-bad.herokuapp.com/api/characters?name=${string_listo}`,\n      {\n        method: \"GET\"\n        \n      }).then(res => res.json())\n      .then(resultado_json => {\n        //resultado_json tiene toda la informacion del personaje\n        this.setState({\n          bool_personaje: false,\n          personaje: resultado_json\n        })\n      })\n    }\n\n    render() {\n      \n        var {isLoaded, temporadas, bool_episodes, episodes, episodio, bool_episodio, bool_personaje, personaje} = this.state;\n\n      //si debo mostrar la informacion de un episodio\n      if (bool_personaje){\n        return <div>\n          <h1>{personaje.name}</h1>\n          <h3>Nacimiento: {personaje.birthday}</h3>\n          <h3>Nickname: {personaje.nickname}</h3>\n          <h3>Actor: {personaje.portrayed}</h3>\n          <h3>Status: {personaje.status}</h3>\n          <h3>Ocupaciones: \n            {personaje.ocupations.map(trabajos => (\n              <ul>\n                <p >{trabajos}</p>\n              </ul>\n\n            ))}\n            \n          </h3>\n          <h3>Temporadas: \n            {personaje.appearance.map(apariciones => (\n              <ul>\n                <button >{apariciones}</button>\n              </ul>\n\n            ))}\n            \n          </h3>\n        </div>\n      }\n      if (bool_episodio){\n        return <div>\n          <h1>{episodio.title}</h1>\n          <h3>Temporada: {episodio.season}</h3>\n          <h3>Episodio: {episodio.episode}</h3>\n          <h3>Fecha de estreno: {episodio.air_date.substr(0, 9)}</h3>\n          <h3>Personajes: \n            {episodio.characters.map(personaje => (\n              <ul>\n                <button onClick={this.characterClicked.bind(this, personaje)}>{personaje}</button>\n              </ul>\n\n            ))}\n          </h3>\n        </div>\n        \n      }\n      else {\n         //si debo mostrar los episodes\n         if (bool_episodes){\n          //aca estoy mostrando los episodes\n          return  <div> \n                <h1> Episodios</h1>\n                {episodes.map(episodio => ( \n                       \n                       <ul >\n                         <a>{episodio.episode}. </a><button onClick={this.episodeClicked.bind(this, episodio)}>{episodio.title}</button>\n                       </ul>))}\n            </div>;\n          \n        }\n        //si debo mostrar las temporadas\n        else \n        {\n          if (!isLoaded) {\n            return <div> Cargando...</div>;\n        }\n          else {\n          \n            return (\n                <div >\n                  <h1> Better Call Saul</h1>\n                  <h2> Temporadas</h2>\n                  \n                    {temporadas[1].map(temporada => ( \n                       \n                      <ul >\n                        <button className='BCS' id={temporada} onClick={this.clickHandler.bind(this,[temporada, 'BCS'])}>{temporada}</button>\n                      </ul>))}\n                  <h1> Breaking Bad</h1>\n                  <h2> Temporadas</h2>\n                  \n                    {temporadas[0].map(temporada => ( \n                      <ul >\n                        <button className='BB' id={temporada} onClick={this.clickHandler.bind(this, [temporada, 'BB'])}>{temporada}</button>\n                      </ul>))}   \n                </div>\n                \n            );\n        }\n        \n        }\n      }\n\n       \n\n        \n    }\n \n    \n\n\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}