{"ast":null,"code":"var _jsxFileName = \"/Users/elisafernandez/tarea1final/src/App.js\";\nimport React, { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      temporadas: [],\n      isLoaded: false,\n      bool_episodes: false,\n      episodes: []\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://tarea-1-breaking-bad.herokuapp.com/api/episodes', {\n      method: \"GET\"\n    }).then(res => res.json()).then(resultado_json => {\n      var temporada_bb = 0;\n      var temporada_bcs = 0;\n      var episodios_bb = [];\n      var episodios_bcs = []; //console.log(`${resultado_json.length}`);\n      //recorro todos los episodios obtenidos y separo por serie\n\n      for (let i = 0; i < resultado_json.length; i += 1) {\n        //si es que es de Breaking bad lo agrego al array de bb\n        if (resultado_json[i].series == 'Breaking Bad') {\n          episodios_bb.push(resultado_json[i]);\n        } //si es que no es de bb, lo agrego al array de bcs\n        else {\n            episodios_bcs.push(resultado_json[i]);\n          }\n      } //recorro los episodios de bb y encuentro cuantas temporadas hay\n\n\n      for (let i = 0; i < episodios_bb.length; i += 1) {\n        var temporadas_provisoria_bb = episodios_bb[i].season;\n\n        if (parseInt(temporadas_provisoria_bb) > parseInt(temporada_bb)) {\n          temporada_bb = temporadas_provisoria_bb;\n        }\n      } //recorro los episodios de bcs y encuentro cuantas temporadas hay\n\n\n      for (let i = 0; i < episodios_bcs.length; i += 1) {\n        var temporadas_provisoria_bcs = episodios_bcs[i].season;\n\n        if (parseInt(temporadas_provisoria_bcs) > parseInt(temporada_bcs)) {\n          temporada_bcs = temporadas_provisoria_bcs;\n        }\n      }\n\n      var temp_bb = [];\n      var temp_bcs = []; //construyo un array con las temporadas de breaking bad\n\n      for (let i = 1; i <= temporada_bb; i += 1) {\n        temp_bb.push(i);\n      } //construyo un array con las temporadas de better call saul\n\n\n      for (let i = 1; i <= temporada_bcs; i += 1) {\n        temp_bcs.push(i);\n      } //Construyo un array con todas las temporadas\n\n\n      var total_temporadas = [temp_bb, temp_bcs];\n      this.setState({\n        isLoaded: true,\n        temporadas: total_temporadas\n      });\n    });\n  }\n\n  clickHandler(valor) {\n    //primero distinguir por serie\n    //si es una temporada de Breaking Bad\n    if (valor[1] == 'BB') {\n      //busco en las temporadas de BB\n      var serie = 'Better+Call+Saul';\n      var t = valor[0]; //TEMPORADA\n    } //si es una temporada de Better Call Saul\n    else {\n        var t = valor[0]; //TEMPORADA\n\n        var serie = 'Breaking+Bad'; //busco en las temporadas de Better Call Saul\n      }\n\n    fetch(`https://tarea-1-breaking-bad.herokuapp.com/api/episodes?series=${serie}`, {\n      method: \"GET\"\n    }).then(res => res.json()).then(resultado_json => {\n      //defino un array vacio\n      var array_titulos = []; //recorro todos los episodios\n\n      for (let i = 0; i < resultado_json.length; i += 1) {\n        //reviso si corresponde a la temporada buscada\n        if (resultado_json[i].season == t) {\n          //guardo el titulo en mi array\n          var titulo = resultado_json[i].title;\n          array_titulos.push(titulo);\n        }\n      }\n\n      this.setState({\n        bool_episodes: true,\n        episodes: array_titulos\n      });\n    });\n  }\n\n  render() {\n    var {\n      isLoaded,\n      temporadas,\n      bool_episodes,\n      episodes\n    } = this.state;\n\n    if (bool_episodes) {\n      //aca estoy mostrando los episodes\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \" Episodios\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 17\n        }, this), episodes.map(episodio => /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            children: episodio\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 26\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 24\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 19\n      }, this);\n    } else {\n      if (!isLoaded) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \" Cargando...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 20\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \" Better Call Saul\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \" Temporadas\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 19\n          }, this), temporadas[1].map(temporada => /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"BCS\",\n              id: temporada,\n              onClick: this.clickHandler.bind(this, [temporada, 'BCS']),\n              children: temporada\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 23\n          }, this)), /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \" Breaking Bad\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \" Temporadas\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 19\n          }, this), temporadas[0].map(temporada => /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"BB\",\n              id: temporada,\n              onClick: this.clickHandler.bind(this, [temporada, 'BB']),\n              children: temporada\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 23\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 17\n        }, this);\n      }\n    }\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/elisafernandez/tarea1final/src/App.js"],"names":["React","Component","App","constructor","props","state","temporadas","isLoaded","bool_episodes","episodes","componentDidMount","fetch","method","then","res","json","resultado_json","temporada_bb","temporada_bcs","episodios_bb","episodios_bcs","i","length","series","push","temporadas_provisoria_bb","season","parseInt","temporadas_provisoria_bcs","temp_bb","temp_bcs","total_temporadas","setState","clickHandler","valor","serie","t","array_titulos","titulo","title","render","map","episodio","temporada","bind"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\n\n\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n                temporadas: [],\n                isLoaded: false,\n                bool_episodes: false,\n                episodes: []\n        }\n    }\n    \n\n    componentDidMount() {\n         fetch('https://tarea-1-breaking-bad.herokuapp.com/api/episodes',\n      {\n        method: \"GET\",\n        \n      }\n    )\n        .then(res => res.json())\n        .then(resultado_json => {\n          var temporada_bb = 0;\n          var temporada_bcs = 0;\n          var episodios_bb = [];\n          var episodios_bcs = [];\n         //console.log(`${resultado_json.length}`);\n\n          //recorro todos los episodios obtenidos y separo por serie\n          for (let i=0; i<resultado_json.length; i+=1){\n            \n            //si es que es de Breaking bad lo agrego al array de bb\n            if(resultado_json[i].series =='Breaking Bad'){\n              \n              episodios_bb.push(resultado_json[i]);\n            }\n            //si es que no es de bb, lo agrego al array de bcs\n            else {\n              episodios_bcs.push(resultado_json[i]);}\n          }\n\n          //recorro los episodios de bb y encuentro cuantas temporadas hay\n          for (let i=0; i<episodios_bb.length; i+=1)\n          {\n            var temporadas_provisoria_bb = episodios_bb[i].season;\n            if (parseInt(temporadas_provisoria_bb) > parseInt(temporada_bb)){\n              temporada_bb = temporadas_provisoria_bb;\n            }\n            \n          }\n\n          //recorro los episodios de bcs y encuentro cuantas temporadas hay\n          for (let i=0; i<episodios_bcs.length; i+=1)\n          {\n            var temporadas_provisoria_bcs = episodios_bcs[i].season;\n            if (parseInt(temporadas_provisoria_bcs) > parseInt(temporada_bcs)){\n              temporada_bcs = temporadas_provisoria_bcs;\n            }\n            \n          }\n\n          var temp_bb = [];\n          var temp_bcs = [];\n          //construyo un array con las temporadas de breaking bad\n          for (let i=1; i<=temporada_bb; i+=1){\n            temp_bb.push(i);\n          }\n          //construyo un array con las temporadas de better call saul\n          for (let i=1; i<=temporada_bcs; i+=1){\n            temp_bcs.push(i);\n          }\n          //Construyo un array con todas las temporadas\n          var total_temporadas = [temp_bb, temp_bcs];\n            this.setState({\n                isLoaded: true,\n                temporadas: total_temporadas\n            })\n        });\n    }\n\n    clickHandler(valor){\n\n      //primero distinguir por serie\n      //si es una temporada de Breaking Bad\n      if (valor[1] == 'BB'){\n        //busco en las temporadas de BB\n        var serie = 'Better+Call+Saul';\n        var t = valor[0]; //TEMPORADA\n      }\n      //si es una temporada de Better Call Saul\n      else{\n        var t = valor[0]; //TEMPORADA\n        var serie = 'Breaking+Bad';\n        //busco en las temporadas de Better Call Saul\n      }\n\n      fetch(`https://tarea-1-breaking-bad.herokuapp.com/api/episodes?series=${serie}`,\n      {\n        method: \"GET\",\n        \n      }\n    ).then(res => res.json())\n    .then(resultado_json => {\n      //defino un array vacio\n      var array_titulos = [];\n      //recorro todos los episodios\n      for (let i=0; i<resultado_json.length; i+=1){\n        //reviso si corresponde a la temporada buscada\n        if (resultado_json[i].season == t ){\n          //guardo el titulo en mi array\n          var titulo = resultado_json[i].title;\n          array_titulos.push(titulo)\n        }\n        \n      }\n      this.setState({\n        bool_episodes: true,\n        episodes: array_titulos\n      })\n      \n    });\n    }\n\n    render() {\n      \n        var {isLoaded, temporadas, bool_episodes, episodes} = this.state;\n\n        if (bool_episodes){\n          //aca estoy mostrando los episodes\n          return  <div> \n                <h1> Episodios</h1>\n                {episodes.map(episodio => ( \n                       \n                       <ul >\n                         <button>{episodio}</button>\n                       </ul>))}\n            </div>;\n          \n        }\n        else \n        {\n          if (!isLoaded) {\n            return <div> Cargando...</div>;\n        }\n          else {\n          \n            return (\n                <div >\n                  <h1> Better Call Saul</h1>\n                  <h2> Temporadas</h2>\n                  \n                    {temporadas[1].map(temporada => ( \n                       \n                      <ul >\n                        <button className='BCS' id={temporada} onClick={this.clickHandler.bind(this,[temporada, 'BCS'])}>{temporada}</button>\n                      </ul>))}\n                  <h1> Breaking Bad</h1>\n                  <h2> Temporadas</h2>\n                  \n                    {temporadas[0].map(temporada => ( \n                      <ul >\n                        <button className='BB' id={temporada} onClick={this.clickHandler.bind(this, [temporada, 'BB'])}>{temporada}</button>\n                      </ul>))}   \n                </div>\n                \n            );\n        }\n        \n        }\n\n        \n    }\n \n    \n\n\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}